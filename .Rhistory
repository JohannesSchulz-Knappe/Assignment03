bw$ID <- bw_ID$district.ID # add ID to bw
bw <- bw[c(11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)] # reorder columns
View(bw)
View(sa16_raw)
sa1 <- bw16_raw[, c(2, 7, 8, 12, 19)] # keep relevant columns
sa1 <- sa16_raw[, c(2, 7, 8, 12, 19)] # keep relevant columns
names(bw1) <- c("election.year", "ID", "district.name", "valid.votes", "AfD.n") # rename columns
names(bw1) <- c("district.name", "election.year", "vote.AfD") # rename columns
names(sa1) <- c("election.year", "ID", "district.name", "valid.votes", "AfD.n") # rename columns
View(sa1)
sa1$vote.AfD <- sa1$AfD.n/sa1$valid.votes
View(sa1)
View(sa1)
sa1$AfD.n       <- NULL
sa1$valid.votes <- NULL
View(sa1)
sa1 <- sa16_raw[, c(7, 8, 12, 19)] # keep relevant columns
names(sa1) <- c("ID", "district.name", "valid.votes", "AfD.n") # rename columns
sa1$vote.AfD    <- sa1$AfD.n/sa1$valid.votes
sa1$AfD.n       <- NULL
sa1$valid.votes <- NULL
sa1$election.year <- "2016"
View(sa1)
View(sa11_raw)
sa2 <- sa11_raw[, c(7, 8, 9, 10, 12, 13, 14, 15, 16, 22)] # keep relevant columns
names(sa2) <- c("ID", "district.name", "eligible.voters", "voters.n",
"valid.votes", "CDU.n", "Linke.n", "SPD.n", "Greens.n", "FDP.n")
View(sa2)
sa2$lag.nonvoters <- sa2$voters.n/sa2$eligible.voters
View(sa2)
sa2$lag.nonvoters <- 1-(sa2$voters.n/sa2$eligible.voters)
View(sa2)
View(bw)
bw1 <- bw_raw[, c(1, 2, 9)] # keep relevant columns
names(bw1) <- c("district.name", "election.year", "vote.AfD") # rename columns
bw1 <- bw1[-c(1, 2, 3, 3+2*(1:44)), ] # delete rows that are not 2016
# Step 2: Extract non-voters and other party voteshares for 2011
bw2 <- bw_raw[, c(1, 3, 4, 5, 6, 7, 8)] # keep relevant columns
names(bw2) <- c("district.name", "lag.turnout", "lag.CDU", "lag.Greens",
"lag.SPD", "lag.FDP", "lag.Linke") # rename columns
bw2 <- bw2[-c(1,2,3,4, 4+2*(1:43)), ] # delete rows that are not 2011
bw2$district.name <- bw1$district.name # add district.names as identifier
# Step 3: Merge variables into one dataframe
bw <- merge(bw1, bw2, "district.name")
# Step 4: Adding state variable
bw$state <- "BW"
# Step 5: Create district ID
bw_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
bw_ID <- bw_ID[c(207:219, 221:232, 234:243, 245:253), ] # keep district IDs for BW
# Manipulate district names to match bw1 & bw2 district names
bw_ID$district.name <- gsub(pattern = 'Heilbronn, Landkreis',
replacement = 'Heilbronn (Land)',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = 'Karlsruhe, Landkreis',
replacement = 'Karlsruhe (Land)',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = 'Heilbronn, Kreisfreie Stadt',
replacement = 'Heilbronn (Stadt)',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = 'Karlsruhe, Kreisfreie Stadt',
replacement = 'Karlsruhe (Stadt)',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = ', UniversitÃ¤tsstadt',
replacement = '',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = ', Landeshauptstadt',
replacement = '',
x = bw_ID$district.name)
bw_ID <- arrange(bw_ID, bw_ID$district.name) # sort alphabetically
bw$ID <- bw_ID$district.ID # add ID to bw
bw <- bw[c(11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)] # reorder columns
View(bw)
sa2$lag.turnout <- sa2$voters.n/sa2$eligible.voters
View(sa2)
View(bw)
sa2$lag.nonvoters <- NULL
View(sa2)
View(bw)
sa2$lag.CDU     <- sa2$CDU.n/sa2$voters.n
sa2$lag.Linke   <- sa2$Linke.n/sa2$voters.n
sa2$lag.SPD     <- sa2$SPD.n/sa2$voters.n
sa2$lag.Greens  <- sa2$Greens.n/sa2$voters.n
sa2$lag.FDP     <- sa2$FDP.n/sa2$voters.n
View(sa2)
sa2$eligible.voters <- NULL
sa2$voters.n        <- NULL
sa2$valid.votes     <- NULL
sa2$CDU.n           <- NULL
sa2$Linke.n         <- NULL
sa2$SPD.n           <- NULL
sa2$Greens.n        <- NULL
sa2$FDP.n           <- NULL
View(sa2)
sa <- merge(sa1, sa2, "ID")
View(sa)
sa <- merge(sa1, sa2, c("ID", "district.name")
View(sa)
sa <- merge(sa1, sa2, c("ID", "district.name"))
View(sa)
sa$state <- "SA"
sa$election.year <- "2016"
View(sa)
View(rp16_raw)
rp1 <- rp16_raw[, c(2, 105)] # keep relevant columns
View(rp1)
names(rp1) <- c("district.name", "vote.AfD") # rename columns
View(rp1)
rp1 <- rp1[rp1$district.name != "VG", ] # delete rows that are not district level
View(rp1)
rp1 <- rp1[rp1$district.name != "VG$", ] # delete rows that are not district level
View(rp1)
rp1 <- rp1[-grep('VG$', rp1$district.name), ]
View(rp1)
rp1 <- rp1[-c(1, grep('VG$', rp1$district.name)), ] # delete rows that are not district level
View(rp1)
rp1_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp1$district.name)
rp1_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp1$district.name)
rp1$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp1$district.name)
rp1$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp1$district.name)
View(rp1)
View(rp11_raw)
rp2 <- rp11_raw[, c(2, 9, 94, 95, 96, 97, 98)]
View(rp2)
names(rp2) <- c("district.name", "lag.turnout", "lag.SPD",
"lag.CDU", "lag.FDP", "lag.Greens", "lag.Linke")
View(rp2)
rp2 <- rp2[-1, ] # delete rows that are not district level
View(rp2)
rp2$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp2$district.name)
View(rp2)
rp <- merge(rp1, rp2, "district.name")
View(rp)
rp <- merge(rp1, rp2, "district.name")
rp$state <- "RP"
rp$election.year <- "2016"
View(rp)
rp_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
View(rp_ID)
rp_ID <- rp_ID[c(grep('^07', rp_ID$district.ID)), ]
View(rp_ID)
View(rp_ID)
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
View(rp_ID)
rp_ID$district.name <- gsub(pattern = ' (Westerwald)',
replacement = '',
x = rp_ID$district.name)
View(rp_ID)
View(rp_ID)
rp_ID$district.name <- gsub(pattern = '(Westerwald)',
replacement = '',
x = rp_ID$district.name)
View(rp_ID)
rp_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
rp_ID <- rp_ID[c(grep('^07', rp_ID$district.ID)), ] # keep IDs for RP
View(rp_ID)
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = " (Westerwald)",
replacement = '',
x = rp_ID$district.name)
View(rp_ID)
rp_ID$district.name <- gsub(pattern = "Altenkirchen (Westerwald)",
replacement = 'Altenkirchen',
x = rp_ID$district.name)
View(rp_ID)
View(rp_ID)
rp_ID$district.name <- gsub(pattern = " (Westerwald)",
replacement = '',
x = rp_ID$district.name)
View(rp_ID)
rp_ID$district.name <- gsub(pattern = "Westerwald",
replacement = '',
x = rp_ID$district.name)
View(rp_ID)
rp_ID$district.name <- gsub(pattern = "()",
replacement = '',
x = rp_ID$district.name)
View(rp_ID)
rp_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
rp_ID <- rp_ID[c(grep('^07', rp_ID$district.ID)), ] # keep IDs for RP
# clean district names
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
View(rp_ID)
View(rp_ID)
rp_ID <- rp_ID[-c(165, 166, 178, 184,)] # keep IDs on district level
rp_ID <- rp_ID[-c(165, 166, 178, 184)] # keep IDs on district level
View(rp_ID)
rp_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
rp_ID <- rp_ID[c(grep('^07', rp_ID$district.ID)), ] # keep IDs for RP
rp_ID <- rp_ID[-c(165, 166, 178, 184), ] # keep IDs on district level
View(rp_ID)
rp_ID <- rp_ID[-c(1, 2, 14, 20), ] # keep IDs on district level
View(rp_ID)
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
arrange(rp_ID, rp_ID$district.name)
View(rp_ID)
rp_ID <- arrange(rp_ID, rp_ID$district.name) # sort alphabetically
View(rp_ID)
rp_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
rp_ID <- rp_ID[c(grep('^07', rp_ID$district.ID)), ] # keep IDs for RP
rp_ID <- rp_ID[-c(1, 2, 14, 20), ] # keep IDs on district level
View(rp_ID)
# clean district names
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = bw_ID$district.name)
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = bw_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
rp_ID <- arrange(rp_ID, rp_ID$district.name) # sort alphabetically
rp_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
rp_ID <- rp_ID[c(grep('^07', rp_ID$district.ID)), ] # keep IDs for RP
rp_ID <- rp_ID[-c(1, 2, 14, 20), ] # keep IDs on district level
# clean district names
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = bw_ID$district.name)
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = bw_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
# clean district names
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
rp_ID <- arrange(rp_ID, rp_ID$district.name) # sort alphabetically
View(rp_ID)
rp_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
rp_ID <- rp_ID[c(grep('^07', rp_ID$district.ID)), ] # keep IDs for RP
rp_ID <- rp_ID[-c(1, 2, 14, 20), ] # keep IDs on district level
# clean district names
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
rp_ID <- arrange(rp_ID, rp_ID$district.name) # sort alphabetically
View(rp_ID)
rp2 <- rp11_raw[, c(2, 9, 94, 95, 96, 97, 98)] # keep relevant columns
names(rp2) <- c("district.name", "lag.turnout", "lag.SPD",
"lag.CDU", "lag.FDP", "lag.Greens", "lag.Linke") # rename columns
rp2 <- rp2[-1, ] # delete rows that are not district level
# clean district names
rp2$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp2$district.name)
rp <- merge(rp1, rp2, "district.name")
rp$state <- "RP"
rp$election.year <- "2016"
View(rp)
rp2 <- rp11_raw[, c(2, 9, 94, 95, 96, 97, 98)] # keep relevant columns
names(rp2) <- c("district.name", "lag.turnout", "lag.SPD",
"lag.CDU", "lag.FDP", "lag.Greens", "lag.Linke") # rename columns
rp2 <- rp2[-1, ] # delete rows that are not district level
View(rp2)
rp2$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp2$district.name)
rp1 <- rp16_raw[, c(2, 105)] # keep relevant columns
names(rp1) <- c("district.name", "vote.AfD") # rename columns
rp1 <- rp1[-c(1, grep('VG$', rp1$district.name)), ] # delete rows that are not district level
# clean district names
rp1$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp1$district.name)
rp1$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp1$district.name)
rp1$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp1$district.name)
rp1$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp1$district.name)
# Step 2: Extract non-voters and other party voteshares for 2011
rp2 <- rp11_raw[, c(2, 9, 94, 95, 96, 97, 98)] # keep relevant columns
names(rp2) <- c("district.name", "lag.turnout", "lag.SPD",
"lag.CDU", "lag.FDP", "lag.Greens", "lag.Linke") # rename columns
rp2 <- rp2[-1, ] # delete rows that are not district level
# clean district names
rp2$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp2$district.name)
# Step 3: Merge variables into one dataframe
rp <- merge(rp1, rp2, "district.name")
View(rp)
rp$ID <- rp_ID$district.ID # add ID to rp
View(rp)
View(rp_ID)
View(bw)
rp$state <- "RP"
rp$election.year <- "2016"
View(bw)
View(rp)
rp <- rp[c(9, 1, 11, 2, 3, 4, 5, 6, 7, 8, 9, 10)] # reorder columns
View(rp)
rp <- rp[c(9, 1, 11, 2, 3, 4, 5, 6, 7, 8, 10)] # reorder columns
View(rp)
rp <- merge(rp1, rp2, "district.name")
rp$state <- "RP"
rp$election.year <- "2016"
rp <- rp[c(9, 1, 11, 2, 3, 4, 5, 6, 7, 8, 10)] # reorder columns
rp$ID <- rp_ID$district.ID # add ID to rp
rp <- rp[c(9, 1, 11, 2, 3, 4, 5, 6, 7, 8, 10)] # reorder columns
View(rp)
rp <- merge(rp1, rp2, "district.name")
rp$state <- "RP"
rp$election.year <- "2016"
rp$ID <- rp_ID$district.ID # add ID to rp
View(rp)
rp <- rp[c(11, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9)] # reorder columns
View(rp)
View(sa)
sa_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
View(sa_ID)
sa_ID <- sa_ID[c(grep('^15', sa_ID$district.ID)),
View(sa_ID)
View(sa_ID)
View(sa_ID)
sa_ID <- sa_ID[c(grep('^15', sa_ID$district.ID)), ] # keep IDs for RP
View(sa_ID)
View(sa_ID)
data.election <- rbind(bw, rp, sa)
View(data.election)
edu_raw <- read.csv("Data_Files/AI003-2.csv",
header = FALSE,
sep = ";",
na.strings = c("-","."),
col.names = c("date", "district.ID", "district.name",
"abitur.percent", "nodegree.percent"),
skip = 6,
nrows = 525,
dec=",") # loads data frame
unemp_raw <- read.csv("Data_Files/659-71-4.csv",
header = FALSE,
sep = ";",
na.strings = c("-","."),
nrows = 533,
dec = ",") # loads data frame
gdp_raw <- read.csv("Data_Files/AI-N-10.csv",
header = FALSE,
sep = ";",
na.strings = c("-","."),
col.names = c("date", "district.ID", "district.name", "GDP.cap"),
skip = 7,
nrows = 525) # loads data frame
refugee_raw <- read.csv("Data_Files/661-31-4.csv",
header = FALSE,
sep = ";",
na.strings = c("-","."),
col.names = c("date", "district.ID", "district.name",
"column04", "column05", "column06",
"column07", "column08", "column09",
"asylum.seeker"),
skip = 9,
nrows = 525,
dec = ",") # loads data frame
source("structural_data_gathering.R")
View(edu_raw)
edu <- edu_raw[, -c(1, 3)]
View(edu)
names(edu) <- c("ID", "abitur.ratio", "nodegree.ratio")   # rename columns
View(edu)
edu$ID <- as.numeric(edu$ID)
View(edu)
View(gdp_raw)
gdp <- gdp_raw[, -c(1, 2)]  # delete unnecessary columns
View(gdp_raw)
names(gdp) <- c("ID", "GDP.capita")   # rename columns
View(gdp)
View(gdp_raw)
gdp <- gdp_raw[, -c(1, 3)]  # delete unnecessary columns
View(gdp)
names(gdp) <- c("ID", "GDP.capita")   # rename columns
View(gdp)
View(unemp_raw)
unemp <- unemp_raw[, c(2, 11)]
View(unemp)
unemp <- unemp[-c(1:9), ] # delete unnecessary rows
names(unemp) <- c("ID", "unempl.rate") # rename columns
View(unemp)
View(refugee)
View(refugee_raw)
refugee <- refugee_raw[, c(2, 10)] # keep necessary columns
View(refugee)
names(refugee) <- c("ID", "n.refugees")
rm(list = ls())
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # remove possible_dir vector
# Running the gathering and cleaning files
# 1. Electoral data gathering
source("electoral_data_gathering.R")
# 2. Structural data gathering
source("structural_data_gathering.R")
# 3. Electoral data cleaning
source("electoral_data_cleaning.R")
# 4. Structural data cleaning
source("structural_data_cleaning.R")
source("electoral_data_gathering.R")
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # remove possible_dir vector
source("electoral_data_gathering.R")
source("election_data_gathering.R")
source("structural_data_gathering.R")
source("election_data_cleaning.R")
source("structural_data_cleaning.R")
Data <- merge(data.election, edu, "ID")
Data <- merge(Data, gdp, "ID")
Data <- merge(Data, unemp, "ID")
Data <- merge(Data, refugee, "ID")
View(Data)
Data <- merge(data.election, edu, "ID", all.x = TRUE)
Data <- merge(Data, gdp, "ID", all.x = TRUE)
Data <- merge(Data, unemp, "ID", all.x = TRUE)
Data <- merge(Data, refugee, "ID", all.x = TRUE)
View(Data)
