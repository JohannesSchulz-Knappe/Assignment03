# Retrieve the data for the additional state elections #
#------------------------------------------------------#
# Attention:
# Since the data of different states is very diverse, we focus on the data of
# the last three state elections (bw16, rp16, sa16) first
# Bremen 2015
# Hamburg 2015
# Brandenburg 2014
# bb14 <- source_XlsxData('https://www.statistik-berlin-brandenburg.de/Publikationen/Dowmies/BB_LT_2014_Wahlkreise_Endg_Ergebnis.xlsx',
# 2, cache = TRUE)
## SHA-1 hash of the downloaded data file is: 'd017e1c2b9bf28227362978e41986a023f149237'
# Saxony 2014
# Thuringia 2014
# Hesse 2013
## data available in compressed format
# Store the URL in an object called 'URL'
# URL <- "http://www.statistik-hessen.de/fileadmin/media/fb05/dokumente/landtagswahl2013.zip"
# temp <- tempfile() # create a temporary file
# download.file(URL, temp) # download compressed file into the temporary file
# he13 <- import(gzfile(temp, "landtagswahl2013.xls")) # Decompress the file and
# convert it into a data frame (not working)
# unlink(temp) # delete the temporary file
#######################################################################
# MPP-E1180: Introduction to Collaborative Social Science Data Analysis
# Assignment03
# Election Data Cleaning
# Md Mujahedul Islam & Johannes Schulz-Knappe
# Update 25 April 2016
# Hertie School of Governance
#######################################################################
#--------------------------------------#
# Preparation                          #
#--------------------------------------#
## if not done before, install packages:
# install.packages(plyr)
library("plyr")
# Create list of commonly used working directories (update, if needed)
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # delete possible_dir
#------------------#
# Cleaning data    #
#------------------#
### 1. Baden-Württemberg
# Step 1: Extract dependent variable for 2016
bw1 <- bw_raw[, c(1, 2, 9)] # keep relevant columns
names(bw1) <- c("district.name", "election.year", "vote.AfD") # rename columns
bw1 <- bw1[-c(1, 2, 3, 3+2*(1:44)), ] # delete rows that are not 2016
# Step 2: Extract non-voters and other party voteshares for 2011
bw2 <- bw_raw[, c(1, 3, 4, 5, 6, 7, 8)] # keep relevant columns
names(bw2) <- c("district.name", "lag.turnout", "lag.CDU", "lag.Greens",
"lag.SPD", "lag.FDP", "lag.Linke") # rename columns
bw2 <- bw2[-c(1, 2, 3, 4, 4+2*(1:43)), ] # delete rows that are not 2011
bw2$district.name <- bw1$district.name # add district.names as identifier
# Step 3: Merge variables into one dataframe
bw <- merge(bw1, bw2, "district.name")
# Step 4: Adding state variable
bw$state <- "BW"
# Step 5: Create district ID
bw_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
bw_ID <- bw_ID[c(207:219, 221:232, 234:243, 245:253), ] # keep district IDs for BW
# Manipulate district names to match bw1 & bw2 district names
bw_ID$district.name <- gsub(pattern = 'Heilbronn, Landkreis',
replacement = 'Heilbronn (Land)',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = 'Karlsruhe, Landkreis',
replacement = 'Karlsruhe (Land)',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = 'Heilbronn, Kreisfreie Stadt',
replacement = 'Heilbronn (Stadt)',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = 'Karlsruhe, Kreisfreie Stadt',
replacement = 'Karlsruhe (Stadt)',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = ', Universitätsstadt',
replacement = '',
x = bw_ID$district.name)
bw_ID$district.name <- gsub(pattern = ', Landeshauptstadt',
replacement = '',
x = bw_ID$district.name)
bw_ID <- arrange(bw_ID, bw_ID$district.name) # sort alphabetically
bw$ID <- bw_ID$district.ID # add ID to bw
bw <- bw[c(11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)] # reorder columns
### 2. Rhineland-Palatinate
# Step 1: Extract dependent variable for 2016
rp1 <- rp16_raw[, c(2, 105)] # keep relevant columns
names(rp1) <- c("district.name", "vote.AfD") # rename columns
rp1 <- rp1[-c(1, grep('VG$', rp1$district.name)), ] # delete rows that are not district level
# clean district names
rp1$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp1$district.name)
rp1$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp1$district.name)
rp1$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp1$district.name)
rp1$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp1$district.name)
# Step 2: Extract non-voters and other party voteshares for 2011
rp2 <- rp11_raw[, c(2, 9, 94, 95, 96, 97, 98)] # keep relevant columns
names(rp2) <- c("district.name", "lag.turnout", "lag.SPD",
"lag.CDU", "lag.FDP", "lag.Greens", "lag.Linke") # rename columns
rp2 <- rp2[-1, ] # delete rows that are not district level
# clean district names
rp2$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp2$district.name)
rp2$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp2$district.name)
# Step 3: Merge variables into one dataframe
rp <- merge(rp1, rp2, "district.name")
# Step 4: Adding state and year variable
rp$state <- "RP"
rp$election.year <- "2016"
# Step 5: Create district ID
View(rp_ID)
rp_ID <- refugee_raw[, c(2, 3)] # Retrieve ID from refugee_raw
rp_ID <- rp_ID[c(grep('^07', rp_ID$district.ID)), ] # keep IDs for RP
rp_ID <- rp_ID[-c(1, 2, 14, 20), ] # keep IDs on district level
# clean district names
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Landkreis',
replacement = 'Kaiserslautern (Land)',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = 'Kaiserslautern, Kreisfreie Stadt',
replacement = 'Kaiserslautern (Stadt)',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Landkreis',
replacement = '',
x = rp_ID$district.name)
rp_ID$district.name <- gsub(pattern = ', Kreisfreie Stadt',
replacement = '',
x = rp_ID$district.name)
rp_ID <- arrange(rp_ID, rp_ID$district.name) # sort alphabetically
rp$ID <- rp_ID$district.ID # add ID to rp
rp <- rp[c(11, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9)] # reorder columns
### 3. Saxony Anhalt
# Step 1: Extract dependent variable for 2016
sa1 <- sa16_raw[, c(7, 8, 12, 19)] # keep relevant columns
names(sa1) <- c("ID", "district.name", "valid.votes", "AfD.n") # rename columns
# sa1 <- sa1[-c(1, grep('VG$', rp1$district.name)), ] # delete rows that are not district level
sa1$vote.AfD    <- sa1$AfD.n/sa1$valid.votes*100
sa1$AfD.n       <- NULL
sa1$valid.votes <- NULL # Calculate voteshare variable and delete used columns
# Step 2: Extract non-voters and other party voteshares for 2011
sa2 <- sa11_raw[, c(7, 8, 9, 10, 12, 13, 14, 15, 16, 22)] # keep relevant columns
names(sa2) <- c("ID", "district.name", "eligible.voters", "voters.n",
"valid.votes", "CDU.n", "Linke.n", "SPD.n", "Greens.n", "FDP.n")
# rename columns
# calculating voter turnout
sa2$lag.turnout <- sa2$voters.n/sa2$eligible.voters*100
# calculating party vote shares in percentage
sa2$lag.CDU     <- sa2$CDU.n/sa2$voters.n*100
sa2$lag.Linke   <- sa2$Linke.n/sa2$voters.n*100
sa2$lag.SPD     <- sa2$SPD.n/sa2$voters.n*100
sa2$lag.Greens  <- sa2$Greens.n/sa2$voters.n*100
sa2$lag.FDP     <- sa2$FDP.n/sa2$voters.n*100
# deleting used columns
sa2$eligible.voters <- NULL
sa2$voters.n        <- NULL
sa2$valid.votes     <- NULL
sa2$CDU.n           <- NULL
sa2$Linke.n         <- NULL
sa2$SPD.n           <- NULL
sa2$Greens.n        <- NULL
sa2$FDP.n           <- NULL
# Step 3: Merge variables into one dataframe
sa <- merge(sa1, sa2, c("ID", "district.name"))
# Step 4: Adding state and year variable
sa$state <- "SA"
sa$election.year <- "2016"
#---------------------------#
# Merge election data       #
#---------------------------#
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
#######################################################################
# MPP-E1180: Introduction to Collaborative Social Science Data Analysis
# Assignment03
# Merging Final Dataset
# Johannes Schulz-Knappe
# Update 25 April 2016
# Hertie School of Governance
#######################################################################
rm(list = ls())
library(repmis)
# Create list of commonly used working directories (update, if needed)
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # remove possible_dir vector
# Running the gathering and cleaning files
# 1. Electoral data gathering
source("election_data_gathering.R")
# 2. Structural data gathering
source("structural_data_gathering.R")
# 3. Electoral data cleaning
source("election_data_cleaning.R")
# 4. Structural data cleaning
source("structural_data_cleaning.R")
# Merging the data
Data <- merge(data.election, edu, "ID", all.x = TRUE)
Data <- merge(Data, gdp, "ID", all.x = TRUE)
Data <- merge(Data, unemp, "ID", all.x = TRUE)
Data <- merge(Data, refugee, "ID", all.x = TRUE)
View(Data)
View(sa1)
sa1 <- sa1[-c(1, 16:58), ] # delete rows that are not district level
View(sa2)
sa2 <- sa2[-c(1, 16:60), ] # delete rows that are not district level
View(sa1)
View(refugee_raw)
View(sa)
sa1 <- sa16_raw[, c(7, 8, 12, 19)] # keep relevant columns
names(sa1) <- c("ID", "district.name", "valid.votes", "AfD.n") # rename columns
sa1 <- sa1[-c(1, 16:58), ] # delete rows that are not district level
sa1$vote.AfD    <- sa1$AfD.n/sa1$valid.votes*100
sa1$AfD.n       <- NULL
sa1$valid.votes <- NULL # Calculate voteshare variable and delete used columns
# Step 2: Extract non-voters and other party voteshares for 2011
sa2 <- sa11_raw[, c(7, 8, 9, 10, 12, 13, 14, 15, 16, 22)] # keep relevant columns
names(sa2) <- c("ID", "district.name", "eligible.voters", "voters.n",
"valid.votes", "CDU.n", "Linke.n", "SPD.n", "Greens.n", "FDP.n")
# rename columns
sa2 <- sa2[-c(1, 16:60), ] # delete rows that are not district level
# calculating voter turnout
sa2$lag.turnout <- sa2$voters.n/sa2$eligible.voters*100
# calculating party vote shares in percentage
sa2$lag.CDU     <- sa2$CDU.n/sa2$voters.n*100
sa2$lag.Linke   <- sa2$Linke.n/sa2$voters.n*100
sa2$lag.SPD     <- sa2$SPD.n/sa2$voters.n*100
sa2$lag.Greens  <- sa2$Greens.n/sa2$voters.n*100
sa2$lag.FDP     <- sa2$FDP.n/sa2$voters.n*100
# deleting used columns
sa2$eligible.voters <- NULL
sa2$voters.n        <- NULL
sa2$valid.votes     <- NULL
sa2$CDU.n           <- NULL
sa2$Linke.n         <- NULL
sa2$SPD.n           <- NULL
sa2$Greens.n        <- NULL
sa2$FDP.n           <- NULL
# Step 3: Merge variables into one dataframe
sa <- merge(sa1, sa2, c("ID", "district.name"))
View(sa)
sa$district.name <- gsub(pattern = 'Landkreis ',
replacement = '',
x = sa$district.name)
sa$district.name <- gsub(pattern = 'Kreisfreie Stadt ',
replacement = '',
x = sa$district.name)
sa$state <- "SA"
sa$election.year <- "2016"
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
View(data.election)
sapply(data.election)
sapply(data.election, class)
data.election <- as.numeric(gsub(",", ".", data.election))
data.election <- rbind(bw, rp, sa)
View(data.election)
data.election <- gsub(",", ".", data.election)
data.election <- gsub(",", ".", data.election(, c[4:10])
data.election$lag.Linke <- gsub(",", ".", data.election$lag.Linke)
data.election$lag.Linke <- gsub(",", ".", x = data.election$lag.Linke)
as.numeric(data.election$lag.Linke)
data.election$lag.Linke <- as.numeric(data.election$lag.Linke)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
data.election$lag.Linke <- as.numeric(data.election$lag.Linke)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
data.election$lag.Linke <- gsub(",", ".", x = data.election$lag.Linke)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
data.election <- data.election(dec = ",")
#######################################################################
# MPP-E1180: Introduction to Collaborative Social Science Data Analysis
# Assignment03
# Merging Final Dataset
# Johannes Schulz-Knappe
# Update 25 April 2016
# Hertie School of Governance
#######################################################################
rm(list = ls())
library(repmis)
# Create list of commonly used working directories (update, if needed)
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # remove possible_dir vector
# Running the gathering and cleaning files
# 1. Electoral data gathering
source("election_data_gathering.R")
# 2. Structural data gathering
source("structural_data_gathering.R")
# 3. Electoral data cleaning
source("election_data_cleaning.R")
# 4. Structural data cleaning
source("structural_data_cleaning.R")
# Merging the data
Data <- merge(data.election, edu, "ID", all.x = TRUE)
Data <- merge(Data, gdp, "ID", all.x = TRUE)
Data <- merge(Data, unemp, "ID", all.x = TRUE)
Data <- merge(Data, refugee, "ID", all.x = TRUE)
View(Data)
View(gdp)
View(gdp_raw)
View(gdp)
gdp <- gdp_raw[, -c(1, 3)]  # delete unnecessary columns
names(gdp) <- c("ID", "GDP.capita")   # rename columns
gdp$ID <- as.numeric(gdp$ID) # change ID class to numeric
gdp <- gdp_raw[, -c(1, 3)]  # delete unnecessary columns
names(gdp) <- c("ID", "GDP.capita")   # rename columns
gdp$GDP.capita <- as.numeric(gdp$GDP.capita) # change GDP variable to numeric
gdp <- gdp_raw[, -c(1, 3)]  # delete unnecessary columns
names(gdp) <- c("ID", "GDP.capita")
edu <- edu_raw[, -c(1, 3)]  # delete unnecessary columns
names(edu) <- c("ID", "abitur.ratio", "nodegree.ratio")   # rename columns
#######################################################################
# MPP-E1180: Introduction to Collaborative Social Science Data Analysis
# Assignment03
# Merging Final Dataset
# Johannes Schulz-Knappe
# Update 25 April 2016
# Hertie School of Governance
#######################################################################
rm(list = ls())
library(repmis)
# Create list of commonly used working directories (update, if needed)
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # remove possible_dir vector
# Running the gathering and cleaning files
# 1. Electoral data gathering
source("election_data_gathering.R")
# 2. Structural data gathering
source("structural_data_gathering.R")
# 3. Electoral data cleaning
source("election_data_cleaning.R")
# 4. Structural data cleaning
source("structural_data_cleaning.R")
# Merging the data
Data <- merge(data.election, edu, "ID", all.x = TRUE)
Data <- merge(Data, gdp, "ID", all.x = TRUE)
Data <- merge(Data, unemp, "ID", all.x = TRUE)
Data <- merge(Data, refugee, "ID", all.x = TRUE)
rm(list = ls())
library(repmis)
# Create list of commonly used working directories (update, if needed)
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # remove possible_dir vector
# Running the gathering and cleaning files
# 1. Electoral data gathering
source("election_data_gathering.R")
# 2. Structural data gathering
source("structural_data_gathering.R")
# 3. Electoral data cleaning
source("election_data_cleaning.R")
# 4. Structural data cleaning
source("structural_data_cleaning.R")
# Merging the data
Data <- merge(data.election, edu, "ID", all.x = TRUE)
Data <- merge(Data, gdp, "ID", all.x = TRUE)
Data <- merge(Data, unemp, "ID", all.x = TRUE)
Data <- merge(Data, refugee, "ID", all.x = TRUE)
Data <- merge(data.election, edu, "ID")
Data <- merge(Data, gdp, "ID")
Data <- merge(Data, unemp, "ID")
Data <- merge(Data, refugee, "ID")
View(edu)
edu$ID <- as.numeric(as.character(edu$ID)) # convert ID to numeric
View(edu)
View(gdp)
gdp <- gdp_raw[, -c(1, 3)]  # delete unnecessary columns
names(gdp) <- c("ID", "GDP.capita")   # rename columns
gdp$ID <- as.numeric(as.character(gdp$ID)) # convert ID to numeric
gdp$GDP.capita <- as.numeric(as.character(gdp$GDP.capita))
View(gdp)
gdp$GDP.capita <- as.character(gdp$GDP.capita)
gdp <- gdp_raw[, -c(1, 3)]  # delete unnecessary columns
names(gdp) <- c("ID", "GDP.capita")   # rename columns
gdp$ID <- as.numeric(as.character(gdp$ID)) # convert ID to numeric
gdp$GDP.capita <- as.character(gdp$GDP.capita)
View(gdp)
gdp$GDP.capita <- gsub(",", ".", x = gdp$GDP.capita)
View(gdp)
gdp$GDP.capita <- as.numeric(gdp$GDP.capita)
View(unemp)
unemp$ID <- as.numeric(as.character(unemp$ID)) # convert ID to numeric
View(unemp)
unemp$unempl.rate <- as.character(unemp$unempl.rate) # convert unempl.rate  to character
unemp$unempl.rate <- gsub(",", ".", x = unemp$unempl.rate) # replace commas with periods
unemp$unempl.rate <- as.numeric(unemp$unempl.rate) # convert unempl.rate  to numeric
View(unemp)
View(refugee)
refugee <- refugee_raw[, c(2, 10)] # keep necessary columns
names(refugee) <- c("ID", "n.refugees")
refugee$ID <- as.numeric(as.character(refugee$ID)) # convert ID to numeric
View(refugee)
View(edu)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
View(data.election)
data.election[, ] <- gsub(",", ".", data.election[, ])
View(data.election)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
data.election[, c(3:10)] <- gsub(",", ".", data.election[, c(3:19)])
data.election[, c(3:10)] <- gsub(",", ".", data.election[, c(3:10)])
View(data.election)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
data.election[, c(4:10)] <- gsub(",", ".", x = data.election[, c(4:10)])
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
data.election$vote.AfD <- gsub(",", ".", data.election$vote.AfD)
data.election[, c(4:10)] <- as.numeric(gsub(",", ".", as.matrix(data.election[, c(4:10)])))
data.election[, c(4:10)] <- as.numeric(gsub(",", ".", as.matrix(data.election[, c(4:10)])),
digits = 2)
View(data.election)
data.election[, c(4:10)] <- as.numeric(gsub(",", ".", as.matrix(data.election[, c(4:10)])))
data.election <- round(as.matrix(data.election[, c(4:10)]), digits=2)
-------------#
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
# replace commas with periods
data.election[, c(4:10)] <- as.numeric(gsub(",", ".", as.matrix(data.election[, c(4:10)])))
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
data.election[, c(4:10)] <- round(as.matrix(data.election[, c(4:10)]), digits=2)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
data.election[, c(4:10)] <- as.numeric(gsub(",", ".", as.matrix(data.election[, c(4:10)])))
data.election[, c(4:10)] <- round(as.matrix(data.election[, c(4:10)]), digits=2)
View(data.election)
data.election$ID <- as.numeric(as.character(data.election$ID))
View(data.election)
data.election$election.year <- as.numeric(as.character(data.election$election.year))
View(data.election)
View(data.election)
data.election$election.year <- as.numeric(data.election$election.year)
View(data.election)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
# replace commas with periods
data.election[, c(4:10)] <- as.numeric(gsub(",", ".", as.matrix(data.election[, c(4:10)])))
# round to 2 digits
data.election[, c(4:10)] <- round(as.matrix(data.election[, c(4:10)]), digits=2)
data.election$ID <- as.numeric(as.character(data.election$ID)) # convert ID into numeric
# convert ID into numeric
data.election$election.year <- as.numeric(data.election$election.year)
View(data.election)
data.election <- rbind(bw, rp, sa) # merge all election data sets into one data frame
View(data.election)
data.election[, c(4:10)] <- as.numeric(gsub(",", ".", as.matrix(data.election[, c(4:10)])))
data.election[, c(4:10)] <- round(as.matrix(data.election[, c(4:10)]), digits=2)
data.election$ID <- as.numeric(as.character(data.election$ID)) # convert ID into numeric
View(data.election)
data.election$election.year <- as.numeric(data.election$election.year)
View(data.election)
rm(list = ls())
library(repmis)
# Create list of commonly used working directories (update, if needed)
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # remove possible_dir vector
# Running the gathering and cleaning files
# 1. Electoral data gathering
source("election_data_gathering.R")
# 2. Structural data gathering
source("structural_data_gathering.R")
# 3. Electoral data cleaning
source("election_data_cleaning.R")
# 4. Structural data cleaning
source("structural_data_cleaning.R")
# Merging the data
Data <- merge(data.election, edu, "ID")
Data <- merge(Data, gdp, "ID")
Data <- merge(Data, unemp, "ID")
Data <- merge(Data, refugee, "ID")
data.election$election.year <- as.numeric(as.character(data.election$election.year))
View(data.election)
rm(list = ls())
library(repmis)
# Create list of commonly used working directories (update, if needed)
possible_dir <- c('C:/Users/Johannes SK/Dropbox/Studium/Spring2016/CollaborativeResearch/Assignment03',
'C:/Users/User/Documents/GitHub/Assignment03')
set_valid_wd(possible_dir) # Set to first valid directory in the possible_dir vector
rm(possible_dir) # remove possible_dir vector
# Running the gathering and cleaning files
# 1. Electoral data gathering
source("election_data_gathering.R")
# 2. Structural data gathering
source("structural_data_gathering.R")
# 3. Electoral data cleaning
source("election_data_cleaning.R")
# 4. Structural data cleaning
source("structural_data_cleaning.R")
# Merging the data
Data <- merge(data.election, edu, "ID")
Data <- merge(Data, gdp, "ID")
Data <- merge(Data, unemp, "ID")
Data <- merge(Data, refugee, "ID")
View(Data)
